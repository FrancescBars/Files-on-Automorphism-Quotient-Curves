M := ModularForms(165,2);
//SetPrecision(M,200);
S := CuspidalSubspace(M);
B:=Basis(S);
F:=[(B[1] - 2*B[8] + 3*B[9] + 2*B[10] - 2*B[12] - 2*B[13] - 2*B[15] + 2*B[16] +
        B[17] - 2*B[18] - 2*B[19] - 2*B[20] + B[21]),
    (2*B[2] + 2*B[7] + 2*B[8] + 2*B[10] + B[11] - 2*B[13] - 4*B[15] - 4*B[18] +
        2*B[19] - 4*B[20]),
    (-B[2] + B[3] + B[7] - B[8] + 3*B[9] + B[10] - 3*B[12] - 3*B[13] + B[14] -
        B[15] + 2*B[17] - B[19] - 3*B[21]),
    (B[4] - B[7] + B[8] - 2*B[9] - 2*B[10] + B[12] + B[13] - B[14] + 2*B[15] +
        B[20] + B[21]),
    (-B[2] + B[5] + 2*B[7] - 2*B[8] + B[9] + B[10] - B[12] - 2*B[13] + 2*B[14] -
        B[16] + B[17] + 2*B[18] - B[19] - 4*B[21]),
    (-B[2] + B[6] + 4*B[7] - 3*B[8] + 4*B[9] + 5*B[10] - 4*B[12] - 6*B[13] +
        2*B[14] - 4*B[15] + 3*B[17] - B[18] - 2*B[19] - 4*B[20] - 4*B[21])];
//F[1];
//F[2];
//F[3];
//F[4];
//F[5];
//F[6];
f1:=F[1];
f2:=F[2]+F[3];
f3:=F[3]+F[4];
f4:=F[4];
f5:=F[5]+F[2];
f6:=F[6]+f2;
F1:=[f1,f2,f3,f4,f5,f6];
//f1;
//f2;
//f3;
//f4;
//f5;
//f6;
prec:=200;
L<q> := LaurentSeriesRing(Rationals(),prec);
R<[x]>:=PolynomialRing(Rationals(),6);
Bexp:=[L!qExpansion(f,prec): f in F1];
eqns:=[R | ];
	d:=1;
tf:=false;
	while tf eq false do
		d:=d+1;
		mons:=MonomialsOfDegree(R,d);
		monsq:=[Evaluate(mon,Bexp) : mon in mons];
		V:=VectorSpace(Rationals(),#mons);
		W:=VectorSpace(Rationals(),prec-10);
		h:=hom<V->W | [W![Coefficient(monsq[i],j) : j in [1..(prec-10)]] : i in [1..#mons]]>;
		K:=Kernel(h);
		eqns:=eqns cat [ &+[Eltseq(V!k)[j]*mons[j] : j in [1..#mons] ] : k in Basis(K)  ];
		X:=Scheme(ProjectiveSpace(R),eqns);
		if Dimension(X) eq 1 then
			if IsSingular(X) eq false then
				X:=Curve(ProjectiveSpace(R),eqns);
				if Genus(X) eq 6 then
					tf:=true;
				end if;
			end if;
		end if;
	end while;
eqns:=GroebnerBasis(ideal<R | eqns>); // Simplifying the equations.
	tf:=true;
	repeat
		t:=#eqns;
		tf:=(eqns[t] in ideal<R | eqns[1..(t-1)]>);
		if tf then 
			Exclude(~eqns,eqns[t]);
		end if;
	until tf eq false;
	t:=0;
	repeat
		t:=t+1;
		tf:=(eqns[t] in ideal<R | Exclude(eqns,eqns[t])>);	
		if tf then
			Exclude(~eqns,eqns[t]);
			t:=0;
		end if;
        until tf eq false;
t:=0;
	repeat
		t:=t+1;
		tf:=(eqns[t] in ideal<R | Exclude(eqns,eqns[t])>);	
		if tf then
			Exclude(~eqns,eqns[t]);
			t:=0;
		end if;
	until tf eq false and t eq #eqns;
X:=Curve(ProjectiveSpace(R),eqns);
//X;
Y:=ChangeRing(X,GF(2));
if IsSingular(Y) eq false then
#Automorphisms(Y);
end if;
